README

This is the software package for the Read-Split-Run pipeline. Included are the scripts and software necessary to run the entire process from beginning to end.


INSTALLATION

Installing the pipeline:
    decompress rsr.tar.gz (tar -zxvf rsr.tar.gz) to the location of your choice; this shall be the INSTALLATION DIRECTORY.

Python 2.7 (or later):
    The encoding guesser requires that python be installed on the system and its executable in an accessible location. It is likely that earlier versions of python will work, but our tests used version 2.7.5.  Python can be downloaded from https://www.python.org/downloads.

Bowtie 1.0.1 (or later): 
    Ensure that you have bowtie (version 1.0.1 or later) installed in an accessible location (see CONFIGURATION, and DEPENDENCIES, below). It can be downloaded from http://bowtie-bio.sourceforge.net. 

Bowtie Indexes:
You will need bowtie indexes and knownGene files for the genome(s) of your choice. Put your index files in the indexes subdirectory of your bowtie install directory.

knownGene reference files:

For the genomes to which you plan to align, download their knownGene reference file. Place the knownGene.txt file in the same directory as your bowtie indexes, and CHANGE THE NAME OF THE FILE TO HAVE THE FOLLOWING PATTERN: OrganismAssemblyName.knownGene.txt (i.e. If you plan on using Human assembly hg19, its knownGene.txt should be "hg19.knownGene.txt"; if you plan on using Mouse assembly mm9sp35, make its knownGene file "mm9sp35.knownGene.txt"; these files are CASE SENSITIVE.

Furthermore, Read-Split-Run requires a special parsed gene reference with intron/exon boundaries identified. We provide a script to create this file called "refflat_parse_RSW.pl" in the RSR INSTALLATION DIECTORY. Run this script and supply the gene reference file as the input argument...
Ex:  perl refflat_parse_RSW.pl /usr/local/bowtie/indexes/hg19.knownGene.txt
It will generate the annotated file "hg19.knownGene.txt.intronBoundry.exonsgaps" which is needed by the splitPairs program.

(editor's note: yes, boundary is misspelled. do not correct it...)

gcc (g++) version 4.8 or better:
Compiling the associated programs requires gcc version 4.8 or higher (to accommodate features of c++11 that are used in splitpairs). 



OPTIONAL CONFIGURATION:

There is no mandatory configuration that needs be done if you have followed the installation instructions to this point. The following are presented as options for the advanced user.

The configuration file: "rsr_config.sh" contains all the configurable values used by the pipeline. It can be edited with any plain-text editor (nano, vim, etc). You can change the following variables in the USER CONFIGURATION section to suit your disired configuration:

BOWTIE_TEMP_DIR     location to store intermediate bowtie files.

SPLIT_TEMP_DIR      location to store intermediate split reads files.

RSR_TEMP_DIR        location to store intermediate RSR options and output files.

LOG_DIR             location to store diagnostic and operational logs.

BOWTIE_INDEX_ROOT    If your bowtie indexes are separated by directory names under a common directory, specify that place here and leave BOWTIE_INDEXES empty

BOWTIE_INDEXES      If your bowtie indexes are all contained in a single directory, specify that here and leave BOWTIE_INDEX_ROOT empty. 

BOWTIE              the absolute path to bowtie executable (e.g. /usr/bin/bowtie).

REFDIR              Directory containing knownGene files (and gene Intron/exon boundary files). All files for your available genomes must be in this directory.

BASES_TO_TRIM       How many bases should be trimmed off the right-end of your reads?  Set this according ot the quality of your reads. Default: 0.


All other variables are internal-use and should not be changed. Read the comments in the configuration file for details as to what function they provide.  

DEPENDENCIES:

All shell scripts (files ending in .sh) rely on "rsw_config.sh," which holds the configuration data. Other scripts' call upon other execuables as needed, depicted below.

rsw_batch_job.sh
-   rsw_pipeline.sh
    -   bowtie.sh
        -   guess-encoding.py
            -   Python 2.7 or newer
        -   bowtie v1.0.1 or newer
    -   split.sh
        -   srr
    -   sfc 
    -   rsr.sh
        -   sp4
-   compare_sh
    -   rsw_comparison

refFlat_parse_RSW.pl and sbc have no dependencies.

RUNNING:

To run the pipeline, execute rsw_batch_job.sh with the following inputs:

mode                Choose "analytic" or "comparison"
                    analytic jobs only produce RSW output files
                    comparative jobs produce RSW output files for both data sets, AND a file which shows the differences between the two

genome              The bowtie index for the genome to which to align reads. Also specifies which knownGene file to use (see INSTALLATION). Specify the assembly name.

readsFile           The file(s) with RNA-Seq data in plain-text FASTQ format.
                    The nature of your run will determine how you should specify your files.
                    if you have ... you should specify your file(s) as...
                        Just one file       the file name, with full path, by itself.
                        Replicates          a double-quoted, comma-separated list
                                            ex: "replicate1.fastq, replicate2.fastq, ..."
                                            ** Yes, include the double-quotes.
                        Paired-end data     place all left-pairs in a comma-separated list, as above, 
                                            then put a vertical-bar | and a second comma-separated 
                                            list with the right-pairs.
                                            ex: "Replicate1_1.fastq,Replicate2_1.fastq|Replicate1_2.fast1,Replicate2_2.fastq"
                                            ** Make sure your pairs are ordered correctly:
                                            "REPLICATE 1 LEFT, REPLICATE 2 LEFT | REPLICATE 1 RIGHT, REPLICATE 2 RIGHT"
                     
           
[readsFile2]        If you are using "comparison" mode, a second set of reads-files goes here,
                    the format is the same as above.

maxGoodAlignments   Maximum number of matches allowed in bowtie (see bowtie -k and -m parameters)

minSplitSize        Smallest length to split your reads into. If you specify more than half the reads' length,
                    the pipeline will exchange it with (readlength - minSplitSize).
                    ** The smaller your split, the more memory, disk space, and time will be needed.

minSplitdistance    Smallest amount of distance allowed between split-reads to be considered a splice-junction candidate.

maxSplitdistance    Largest amount of distance between split-reads to be considered a splice-junction candidate.

regionBuffer        By how much candidate junctions are allowed to differ in their start-position in order to "support" one-another.

requiredSupports    Report only junctions with this many supporting reads, or more.

pathToSaveFesults   Where to put the final output files.


Examples:

Several scripts are provided as examples of how to run the pipeline. Look at the files in samples directory.

Here are presented example command-lines for doing various kinds of runs...

Analytic runs:

Normal Run: ./rsw_batch_job.sh analytic mouse "mm9.fastq" 11 11 3 30000 4 2 ~/mm9_results

Run with Replicates:  ./rsw_batch_job analytic human "hg19-1.fastq,hg19-2.fastq,hg19-3.fastq" 11 33 3 50000 5 2 ~/hg19_results

Paired Run: ./rsw_batch_job.sh analytic human "hg19_1.fastq|hg19_2.fastq" 11 33 3 50000 5 2 ~/hg19_paired_results

Paired, replicated: ./rsw_batch_job analytic human "hg19-1_1.fastq,hg19-2_1.fastq|hg19-1_2.fastq,hg19-2_2.fastq" 11 33 3 50000 5 2 ~/hg19_pair_repl_results

Comparative runs:

Normal Run: ./rsw_batch_job.sh comparative mouse "set1.fastq" "set2.fastq" 11 11 3 30000 4 2 ~/mm9_compare
Run with Replicates:  ./rsw_batch_job analytic human "set1replicate1.fastq,set1replicate2.fastq" "set2replicate1.fastq,set2replicate2.fastq" 11 33 3 50000 5 2 ~/hg19_results
Paired Run: ./rsw_batch_job.sh analytic human "set1_1.fastq|set1_2.fastq" "set2_1.fastq|set2_2.fastq" 11 33 3 50000 5 2 ~/hg19_paired_results
...

KNOWN ISSUES

The Quality-encoding detection portion of bowtie.sh is known to cause a broken pipe with awk. This is acceptible and does not interfere with the performance of the pipeline.


